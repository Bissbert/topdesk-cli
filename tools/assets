#!/bin/sh
# List Topdesk assets
set -eu

_this="$0"; _dir=${_this%/*}; _root=${_dir%/tools}
. "$_root/lib/common.sh"; . "$_root/lib/log.sh"; . "$_root/lib/args.sh"; . "$_root/lib/config.sh"
. "$_root/lib/jq.sh"; . "$_root/lib/paginate.sh"

PAGE_SIZE_DEFAULT=${TDX_PAGE_SIZE:-100}
PAGE_PARAM_DEFAULT=${TDX_PAGE_PARAM:-pageSize}
OFFSET_PARAM_DEFAULT=${TDX_OFFSET_PARAM:-start}
FIELDS_DEFAULT=${TDX_ASSET_FIELDS:-id,objectNumber,name,type.name,branch.name,location.name}

usage() {
  cat <<EOF
Usage: ${TOOLBOX_NAME} assets [options]

List assets via /tas/api/assetmgmt/assets (or custom --path). JSON by default.

Options:
  -h, --help           Show help
  --query QS           Query string
  --param KEY=VAL      Add query param (repeatable; also accepts "--param KEY VAL")
  --path PATH          Override endpoint (default: /tas/api/assetmgmt/assets)
  --all                Fetch all pages
  --limit N            Stop after N items
  --page-size N        Items per page (default: $PAGE_SIZE_DEFAULT)
  --page-param NAME    Page size parameter name (default: $PAGE_PARAM_DEFAULT)
  --offset-param NAME  Offset/start parameter name (default: $OFFSET_PARAM_DEFAULT)
  --format FMT         json|tsv|csv
  --headers            Include header row for tsv/csv
  --fields LIST        Comma-separated fields (default: $FIELDS_DEFAULT)
  --raw                Raw JSON
  --pretty             Pretty JSON (jq)
EOF
}

QS=""; PARAMS=""; PATH_OVERRIDE=""; FORMAT=json; HEADERS=0; RAW=0; PRETTY=0
FIELDS=$FIELDS_DEFAULT
ALL=0; LIMIT=""; PAGE_SIZE=$PAGE_SIZE_DEFAULT; PAGE_PARAM=${TDX_PAGE_PARAM:-$PAGE_PARAM_DEFAULT}; OFFSET_PARAM=${TDX_OFFSET_PARAM:-$OFFSET_PARAM_DEFAULT}

while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)
      usage; exit 0 ;;
    --query)
      req_arg "$@"; QS=$2; shift 2; continue ;;
    --param)
      req_arg "$@"; args_take_param "$2" "${3-}" --param; args_params_append PARAMS "$ARGS_PARAM_KEY" "$ARGS_PARAM_VAL"; shift $((2 + ARGS_PARAM_SHIFT)); continue ;;
    --param=*)
      args_take_param "${1#--param=}" "" --param; args_params_append PARAMS "$ARGS_PARAM_KEY" "$ARGS_PARAM_VAL"; shift; continue ;;
    --path)
      req_arg "$@"; PATH_OVERRIDE=$2; shift 2; continue ;;
    --all)
      ALL=1; shift; continue ;;
    --limit)
      req_arg "$@"; LIMIT=$2; shift 2; continue ;;
    --page-size)
      req_arg "$@"; PAGE_SIZE=$2; shift 2; continue ;;
    --page-param)
      req_arg "$@"; PAGE_PARAM=$2; shift 2; continue ;;
    --offset-param)
      req_arg "$@"; OFFSET_PARAM=$2; shift 2; continue ;;
    --format)
      req_arg "$@"; FORMAT=$2; shift 2; continue ;;
    --headers)
      HEADERS=1; shift; continue ;;
    --fields)
      req_arg "$@"; FIELDS=$2; shift 2; continue ;;
    --raw)
      RAW=1; shift; continue ;;
    --pretty)
      PRETTY=1; shift; continue ;;
    --)
      shift; break ;;
    -*)
      err "unknown option: %s" "$1"; usage >&2; exit 2 ;;
    *)
      break ;;
  esac
done

CALL_BIN="$_root/tools/call"
path=${PATH_OVERRIDE:-/tas/api/assetmgmt/assets}

qs=$(query_apply_params "$QS" "$PARAMS")

if [ "$ALL" = 1 ] || [ -n "$LIMIT" ]; then
  if [ "$FORMAT" = json ]; then
    paginate_json "$CALL_BIN" "$path" "$qs" "$PAGE_PARAM" "$OFFSET_PARAM" "$PAGE_SIZE" "$LIMIT"
  else
    paginate_tabular "$CALL_BIN" "$path" "$qs" "$FIELDS" "$FORMAT" "$HEADERS" "$PAGE_PARAM" "$OFFSET_PARAM" "$PAGE_SIZE" "$LIMIT"
  fi
  exit 0
fi

page_qs=$(query_add "$qs" "$PAGE_PARAM" "$PAGE_SIZE")

if [ "$FORMAT" = json ]; then
  if [ -n "$page_qs" ]; then
    "$CALL_BIN" GET "$path" --query "$page_qs" ${RAW:+--raw} ${PRETTY:+--pretty}
  else
    "$CALL_BIN" GET "$path" ${RAW:+--raw} ${PRETTY:+--pretty}
  fi
  exit $?
fi

jq_require "--format $FORMAT"
printer='@tsv'; [ "$FORMAT" = csv ] && printer='@csv'
jq_fields=$(jq_field_extractor "$FIELDS")
if [ "$HEADERS" = 1 ]; then
  jq_header=$(jq_header_array "$FIELDS")
  printf '%s\n' "$jq_header" | jq -r "$printer"
fi
if [ -n "$page_qs" ]; then
  "$CALL_BIN" GET "$path" --query "$page_qs" --raw | jq -r ".[] | [$jq_fields] | $printer"
else
  "$CALL_BIN" GET "$path" --raw | jq -r ".[] | [$jq_fields] | $printer"
fi
