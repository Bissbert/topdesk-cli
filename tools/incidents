#!/bin/sh
# List Topdesk incidents (basic wrapper)
set -eu

_this="$0"; _dir=${_this%/*}; _root=${_dir%/tools}
. "$_root/lib/common.sh"; . "$_root/lib/log.sh"; . "$_root/lib/args.sh"; . "$_root/lib/config.sh"
. "$_root/lib/jq.sh"; . "$_root/lib/paginate.sh"

PAGE_SIZE_DEFAULT=${TDX_PAGE_SIZE:-100}
PAGE_PARAM_DEFAULT=${TDX_PAGE_PARAM:-pageSize}
OFFSET_PARAM_DEFAULT=${TDX_OFFSET_PARAM:-start}
FIELDS_DEFAULT=${TDX_DEFAULT_FIELDS:-number,id,briefDescription,caller.name,operator.name,status,priority,creationDate}

usage() {
  cat <<EOF
Usage: ${TOOLBOX_NAME} incidents [options]

List incidents via /tas/api/incidents.

Options:
  -h, --help           Show help
  --page-size N        Items per page (default: $PAGE_SIZE_DEFAULT)
  --archived BOOL      Filter archived (true|false)
  --query QS           Extra query string (appended)
  --param KEY=VAL      Add query param (repeatable; also accepts "--param KEY VAL")
  --all                Fetch all pages
  --limit N            Stop after N items (with --all)
  --page-param NAME    Page size parameter name (default: $PAGE_PARAM_DEFAULT)
  --offset-param NAME  Offset/start parameter name (default: $OFFSET_PARAM_DEFAULT)
  --format FMT         json|tsv|csv (default: json)
  --headers            Include header row for tsv/csv
  --fields LIST        Comma-separated fields (dot paths allowed)
  --raw                Print raw (applies to json)
  --pretty             Pretty-print JSON (requires jq)
EOF
}

PAGE_SIZE=$PAGE_SIZE_DEFAULT
ARCH=""; QS=""; PARAMS=""; RAW=0; PRETTY=0; FORMAT=json; HEADERS=0; FIELDS=$FIELDS_DEFAULT
ALL=0; LIMIT=""; PAGE_PARAM=${TDX_PAGE_PARAM:-$PAGE_PARAM_DEFAULT}; OFFSET_PARAM=${TDX_OFFSET_PARAM:-$OFFSET_PARAM_DEFAULT}

while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)
      usage; exit 0 ;;
    --page-size)
      req_arg "$@"; PAGE_SIZE=$2; shift 2; continue ;;
    --archived)
      req_arg "$@"; ARCH=$2; shift 2; continue ;;
    --query)
      req_arg "$@"; QS=$2; shift 2; continue ;;
    --param)
      req_arg "$@"; args_take_param "$2" "${3-}" --param; args_params_append PARAMS "$ARGS_PARAM_KEY" "$ARGS_PARAM_VAL"; shift $((2 + ARGS_PARAM_SHIFT)); continue ;;
    --param=*)
      args_take_param "${1#--param=}" "" --param; args_params_append PARAMS "$ARGS_PARAM_KEY" "$ARGS_PARAM_VAL"; shift; continue ;;
    --all)
      ALL=1; shift; continue ;;
    --limit)
      req_arg "$@"; LIMIT=$2; shift 2; continue ;;
    --page-param)
      req_arg "$@"; PAGE_PARAM=$2; shift 2; continue ;;
    --offset-param)
      req_arg "$@"; OFFSET_PARAM=$2; shift 2; continue ;;
    --format)
      req_arg "$@"; FORMAT=$2; shift 2; continue ;;
    --headers)
      HEADERS=1; shift; continue ;;
    --fields)
      req_arg "$@"; FIELDS=$2; shift 2; continue ;;
    --raw)
      RAW=1; shift; continue ;;
    --pretty)
      PRETTY=1; shift; continue ;;
    --)
      shift; break ;;
    -*)
      err "unknown option: %s" "$1"; usage >&2; exit 2 ;;
    *)
      break ;;
  esac
done

CALL_BIN="$_root/tools/call"
PATH_INC="/tas/api/incidents"

qs=$(query_apply_params "$QS" "$PARAMS")
[ -n "$ARCH" ] && qs=$(query_add "$qs" "archived" "$ARCH")

if [ "$ALL" = 1 ] || [ -n "$LIMIT" ]; then
  if [ "$FORMAT" = json ]; then
    paginate_json "$CALL_BIN" "$PATH_INC" "$qs" "$PAGE_PARAM" "$OFFSET_PARAM" "$PAGE_SIZE" "$LIMIT"
  else
    paginate_tabular "$CALL_BIN" "$PATH_INC" "$qs" "$FIELDS" "$FORMAT" "$HEADERS" "$PAGE_PARAM" "$OFFSET_PARAM" "$PAGE_SIZE" "$LIMIT"
  fi
  exit 0
fi

page_qs=$(query_add "$qs" "$PAGE_PARAM" "$PAGE_SIZE")

if [ "$FORMAT" = json ]; then
  "$CALL_BIN" GET "$PATH_INC" --query "$page_qs" ${RAW:+--raw} ${PRETTY:+--pretty}
  exit $?
fi

jq_require "--format $FORMAT"
printer='@tsv'; [ "$FORMAT" = csv ] && printer='@csv'
jq_fields=$(jq_field_extractor "$FIELDS")
if [ "$HEADERS" = 1 ]; then
  jq_header=$(jq_header_array "$FIELDS")
  printf '%s\n' "$jq_header" | jq -r "$printer"
fi
"$CALL_BIN" GET "$PATH_INC" --query "$page_qs" --raw | jq -r ".[] | [$jq_fields] | $printer"
