#!/bin/sh
# Test connectivity to Topdesk API
set -eu

_this="$0"; _dir=${_this%/*}; _root=${_dir%/tools}
. "$_root/lib/common.sh"; . "$_root/lib/log.sh"; . "$_root/lib/args.sh"; . "$_root/lib/config.sh"

usage() {
  cat <<EOF
Usage: ${TOOLBOX_NAME} ping [options]

Test connectivity and authentication to Topdesk API.

Options:
  -h, --help       Show this help
  -v, --verbose    Show detailed output
  -q, --quiet      Suppress all output except errors
  --timeout SEC    Connection timeout (default: 5)
  --endpoint PATH  API endpoint to test (default: /tas/api/incidents)

Exit codes:
  0  Success - API is reachable and authentication works
  1  Connection failed - Cannot reach the API
  2  Authentication failed - API reachable but credentials invalid
  3  Configuration error - Missing required settings

Configuration:
  Requires TDX_BASE_URL and authentication (TDX_AUTH_TOKEN, TDX_AUTH_HEADER, or TDX_USER/TDX_PASS)
EOF
}

# Default values
VERBOSE=0
QUIET=0
TIMEOUT=5
TEST_ENDPOINT="/tas/api/incidents"

# Parse arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;
    -v|--verbose)
      VERBOSE=1
      shift
      ;;
    -q|--quiet)
      QUIET=1
      shift
      ;;
    --timeout)
      req_arg "$@"
      TIMEOUT=$2
      shift 2
      ;;
    --endpoint)
      req_arg "$@"
      TEST_ENDPOINT=$2
      shift 2
      ;;
    --)
      shift
      break
      ;;
    -*)
      err "unknown option: %s" "$1"
      usage >&2
      exit 2
      ;;
    *)
      err "unexpected argument: %s" "$1"
      usage >&2
      exit 2
      ;;
  esac
done

# Helper functions
verbose() {
  [ $VERBOSE -eq 1 ] && printf '%s\n' "$*" >&2
}

output() {
  [ $QUIET -eq 0 ] && printf '%s\n' "$*"
}

# Mask sensitive data in strings
mask_auth() {
  _ma_input="$1"
  _ma_type="${2:-token}"

  case "$_ma_type" in
    token)
      # Mask bearer tokens, keeping first few chars for identification
      echo "$_ma_input" | sed -E 's/(Bearer |Token |Basic )([A-Za-z0-9+\/=_-]{4})[A-Za-z0-9+\/=._-]+/\1\2<redacted>/g'
      ;;
    password)
      # Mask password in user:pass format
      echo "$_ma_input" | sed -E 's/([^:]+):.+/\1:<redacted>/'
      ;;
    header)
      # Mask auth headers
      echo "$_ma_input" | sed -E 's/(Authorization: )(Bearer |Token |Basic )([A-Za-z0-9+\/=_-]{4})[A-Za-z0-9+\/=._-]+/\1\2\3<redacted>/g'
      ;;
    *)
      echo "$_ma_input"
      ;;
  esac
}

# Show system and curl info
show_system_info() {
  if [ $VERBOSE -eq 1 ]; then
    verbose "System information:"
    CURL_VERSION=$(curl --version | head -1 | awk '{print $2}')
    verbose "  curl version: $CURL_VERSION"
    verbose "  OS: $(uname -s) $(uname -r)"
    verbose ""
  fi
}

# Load configuration (this will set defaults and load from file/env)
load_config "" 2>/dev/null || true

# Show system info if verbose
show_system_info

# Check configuration
verbose "Checking configuration..."
if [ -z "${TDX_BASE_URL:-}" ]; then
  err "TDX_BASE_URL is not configured"
  err "Run '${TOOLBOX_NAME} config init' to create a configuration"
  exit 3
fi

# Check authentication
if [ -z "${TDX_AUTH_TOKEN:-}" ] && \
   [ -z "${TDX_AUTH_HEADER:-}" ] && \
   [ -z "${TDX_USER:-}" ]; then
  err "No authentication method configured"
  err "Set TDX_AUTH_TOKEN, TDX_AUTH_HEADER, or TDX_USER/TDX_PASS"
  exit 3
fi

verbose "Configuration:"
verbose "  Base URL: $TDX_BASE_URL"
verbose "  Test endpoint: $TEST_ENDPOINT"
verbose "  Timeout: ${TIMEOUT}s"
verbose "  TLS verification: $([ "${TDX_VERIFY_TLS:-1}" = "1" ] && echo "enabled" || echo "disabled")"
verbose ""

# Build the test URL
TEST_URL="${TDX_BASE_URL%/}${TEST_ENDPOINT}"

# Add minimal query parameter to reduce response size
if echo "$TEST_ENDPOINT" | grep -q '?'; then
  TEST_URL="${TEST_URL}&pageSize=1"
else
  TEST_URL="${TEST_URL}?pageSize=1"
fi

verbose "Building request:"
verbose "  Method: GET"
verbose "  URL: $TEST_URL"

# Show authentication details
if [ -n "${TDX_AUTH_TOKEN:-}" ]; then
  MASKED_TOKEN=$(mask_auth "$TDX_AUTH_TOKEN" "token")
  verbose "  Authorization: $MASKED_TOKEN"
elif [ -n "${TDX_AUTH_HEADER:-}" ]; then
  MASKED_HEADER=$(mask_auth "$TDX_AUTH_HEADER" "header")
  verbose "  Custom header: $MASKED_HEADER"
elif [ -n "${TDX_USER:-}" ]; then
  MASKED_CREDS=$(mask_auth "${TDX_USER}:${TDX_PASS:-}" "password")
  verbose "  Basic auth: $MASKED_CREDS"
fi

verbose ""

# Measure response time
START_TIME=$(date +%s 2>/dev/null || date +%S)

# Build and show curl command for debugging
verbose "Executing curl command:"

# Execute curl based on auth method
# Build curl command string for verbose display
CURL_BASE="curl -s -i -w '\\n==STATUS==%{http_code}\\n==TIME==%{time_total}' --connect-timeout $TIMEOUT --max-time $TIMEOUT"

if [ -n "${TDX_AUTH_TOKEN:-}" ]; then
  MASKED_TOKEN=$(mask_auth "$TDX_AUTH_TOKEN" "token")
  if [ $VERBOSE -eq 1 ]; then
    verbose "  $CURL_BASE \\"
    verbose "    -H \"Authorization: $MASKED_TOKEN\" \\"
    [ "${TDX_VERIFY_TLS:-1}" = "0" ] && verbose "    -k \\"
    verbose "    \"$TEST_URL\""
    verbose ""
  fi

  if [ "${TDX_VERIFY_TLS:-1}" = "0" ]; then
    RESPONSE=$(curl -s -i -w '\n==STATUS==%{http_code}\n==TIME==%{time_total}' --connect-timeout "$TIMEOUT" --max-time "$TIMEOUT" \
      -H "Authorization: $TDX_AUTH_TOKEN" -k \
      "$TEST_URL" 2>/dev/null) || RESPONSE="FAILED"
  else
    RESPONSE=$(curl -s -i -w '\n==STATUS==%{http_code}\n==TIME==%{time_total}' --connect-timeout "$TIMEOUT" --max-time "$TIMEOUT" \
      -H "Authorization: $TDX_AUTH_TOKEN" \
      "$TEST_URL" 2>/dev/null) || RESPONSE="FAILED"
  fi
elif [ -n "${TDX_AUTH_HEADER:-}" ]; then
  MASKED_HEADER=$(mask_auth "$TDX_AUTH_HEADER" "header")
  if [ $VERBOSE -eq 1 ]; then
    verbose "  $CURL_BASE \\"
    verbose "    -H \"$MASKED_HEADER\" \\"
    [ "${TDX_VERIFY_TLS:-1}" = "0" ] && verbose "    -k \\"
    verbose "    \"$TEST_URL\""
    verbose ""
  fi

  if [ "${TDX_VERIFY_TLS:-1}" = "0" ]; then
    RESPONSE=$(curl -s -i -w '\n==STATUS==%{http_code}\n==TIME==%{time_total}' --connect-timeout "$TIMEOUT" --max-time "$TIMEOUT" \
      -H "$TDX_AUTH_HEADER" -k \
      "$TEST_URL" 2>/dev/null) || RESPONSE="FAILED"
  else
    RESPONSE=$(curl -s -i -w '\n==STATUS==%{http_code}\n==TIME==%{time_total}' --connect-timeout "$TIMEOUT" --max-time "$TIMEOUT" \
      -H "$TDX_AUTH_HEADER" \
      "$TEST_URL" 2>/dev/null) || RESPONSE="FAILED"
  fi
elif [ -n "${TDX_USER:-}" ]; then
  MASKED_CREDS=$(mask_auth "${TDX_USER}:${TDX_PASS:-}" "password")
  if [ $VERBOSE -eq 1 ]; then
    verbose "  $CURL_BASE \\"
    verbose "    -u \"$MASKED_CREDS\" \\"
    [ "${TDX_VERIFY_TLS:-1}" = "0" ] && verbose "    -k \\"
    verbose "    \"$TEST_URL\""
    verbose ""
  fi

  if [ "${TDX_VERIFY_TLS:-1}" = "0" ]; then
    RESPONSE=$(curl -s -i -w '\n==STATUS==%{http_code}\n==TIME==%{time_total}' --connect-timeout "$TIMEOUT" --max-time "$TIMEOUT" \
      -u "${TDX_USER}:${TDX_PASS:-}" -k \
      "$TEST_URL" 2>/dev/null) || RESPONSE="FAILED"
  else
    RESPONSE=$(curl -s -i -w '\n==STATUS==%{http_code}\n==TIME==%{time_total}' --connect-timeout "$TIMEOUT" --max-time "$TIMEOUT" \
      -u "${TDX_USER}:${TDX_PASS:-}" \
      "$TEST_URL" 2>/dev/null) || RESPONSE="FAILED"
  fi
else
  if [ $VERBOSE -eq 1 ]; then
    verbose "  $CURL_BASE \\"
    [ "${TDX_VERIFY_TLS:-1}" = "0" ] && verbose "    -k \\"
    verbose "    \"$TEST_URL\""
    verbose ""
  fi

  if [ "${TDX_VERIFY_TLS:-1}" = "0" ]; then
    RESPONSE=$(curl -s -i -w '\n==STATUS==%{http_code}\n==TIME==%{time_total}' --connect-timeout "$TIMEOUT" --max-time "$TIMEOUT" \
      -k "$TEST_URL" 2>/dev/null) || RESPONSE="FAILED"
  else
    RESPONSE=$(curl -s -i -w '\n==STATUS==%{http_code}\n==TIME==%{time_total}' --connect-timeout "$TIMEOUT" --max-time "$TIMEOUT" \
      "$TEST_URL" 2>/dev/null) || RESPONSE="FAILED"
  fi
fi

verbose "Testing connection..."

# Calculate elapsed time
END_TIME=$(date +%s 2>/dev/null || date +%S)
ELAPSED=$((END_TIME - START_TIME))

# Parse response
if [ "$RESPONSE" = "FAILED" ]; then
  err "Connection failed: Cannot reach $TDX_BASE_URL"
  output "Status: UNREACHABLE"
  exit 1
fi

# Extract parts from response
# Response format: headers + body + ==STATUS==code + ==TIME==time
HTTP_CODE=$(echo "$RESPONSE" | grep "^==STATUS==" | sed 's/==STATUS==//')
RESPONSE_TIME=$(echo "$RESPONSE" | grep "^==TIME==" | sed 's/==TIME==//')

# Extract headers and body
HEADERS=$(echo "$RESPONSE" | sed -n '1,/^$/p' | head -20)
BODY=$(echo "$RESPONSE" | sed -n '/^$/,/^==STATUS==/p' | sed '1d;$d')

# Display response information in verbose mode
if [ $VERBOSE -eq 1 ]; then
  verbose ""
  verbose "Response received:"
  verbose "  HTTP Status: $HTTP_CODE"
  verbose "  Response time: ${RESPONSE_TIME}s"
  verbose ""

  if [ -n "$HEADERS" ]; then
    verbose "Response headers:"
    echo "$HEADERS" | while IFS= read -r line; do
      [ -n "$line" ] && verbose "  $line"
    done | head -15
    verbose ""
  fi

  if [ -n "$BODY" ]; then
    verbose "Response body preview:"
    echo "$BODY" | head -5 | while IFS= read -r line; do
      verbose "  $line"
    done
  fi
fi

# Interpret results
case "$HTTP_CODE" in
  200|201|204)
    output "Status: OK"
    output "Response: ${RESPONSE_TIME:-$ELAPSED}s"
    output "HTTP: $HTTP_CODE"
    output "API: ${TDX_BASE_URL%/}"
    [ $VERBOSE -eq 1 ] && output "Endpoint: $TEST_ENDPOINT"
    exit 0
    ;;
  401|403)
    err "Authentication failed (HTTP $HTTP_CODE)"
    output "Status: AUTH_FAILED"
    if [ $VERBOSE -eq 1 ] && [ -n "$BODY" ]; then
      verbose ""
      verbose "Error details:"
      echo "$BODY" | head -10 | while IFS= read -r line; do
        verbose "  $line"
      done
    fi
    exit 2
    ;;
  404)
    # 404 might mean the endpoint doesn't exist, but API is reachable
    warn "Endpoint not found (HTTP 404), but API is reachable"
    output "Status: OK (endpoint not found)"
    output "Response: ${RESPONSE_TIME:-$ELAPSED}s"
    output "API: ${TDX_BASE_URL%/}"
    exit 0
    ;;
  500|502|503|504)
    err "Server error (HTTP $HTTP_CODE)"
    output "Status: SERVER_ERROR"
    if [ $VERBOSE -eq 1 ] && [ -n "$BODY" ]; then
      verbose ""
      verbose "Server error details:"
      echo "$BODY" | head -10 | while IFS= read -r line; do
        verbose "  $line"
      done
    fi
    exit 1
    ;;
  *)
    err "Unexpected response (HTTP $HTTP_CODE)"
    output "Status: UNKNOWN"
    if [ $VERBOSE -eq 1 ] && [ -n "$BODY" ]; then
      verbose ""
      verbose "Response details:"
      echo "$BODY" | head -10 | while IFS= read -r line; do
        verbose "  $line"
      done
    fi
    exit 1
    ;;
esac